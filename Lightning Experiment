
ArrayList<strike> s = new ArrayList<strike>();

void setup() {
  size(1080, 720);
}

void draw() {
  background(255);
  for(int i = s.size() - 1; i >= 0; i --) {
    s.get(i).update(20);
    s.get(i).show();
    if(s.get(i).dead) s.remove(i);
  }
  if(s.size() < 5) {
  s.add(new strike(new PVector(random(width), 50), 100, 0, 5));
  }
}

void mouseReleased() {
  s.add(new strike(new PVector(mouseX, mouseY), 100, 0, 5));
}

class strike {

  PVector start, end;

  boolean split = false;
  boolean both = false;

  boolean dead = false;

  float a, r = 0;
  float h, d;

  strike s1, s2;

  int n, max;

  strike(PVector start, float h, int n, int max) {
    this.start = start;
    this.d = random(h/2) + h;
    this.h = h;
    this.n = n;
    this.max = max;

    a = random(PI/4, 3 * PI/4);
    end = new PVector(start.x + cos(a) * this.d, start.y + sin(a) * this.d);
  }

  void update(float spd) {

    if(r < d) {
      r += spd;
    } else {
      r = d;
      if(!split && n < max) {
        split = true;
        if(random(1) > 0.5) {
          both = true;
          s1 = new strike(end, h, n + 1, max);
          s2 = new strike(end, h, n + 1, max);
        }  else {
          both = false;
          s1 = new strike(end, h, n + 1, max);
        }
      } if(n >= max) {
          dead = true;
      } else {
        if(both) dead = s1.dead && s2.dead;
        else dead = s1.dead;
      }
    }
   if(split) {
      s1.update(spd);
      if(both) {
        s2.update(spd);
      }
    }
  }

  void show() {

    stroke(0, 0, 0);
    strokeWeight(r/d * 1);

    line(start.x, start.y, start.x + cos(a) * r, start.y + sin(a) * r);
    if(split) {
      s1.show();
      if(both) {
        s2.show();
      }
    }
  }

}
